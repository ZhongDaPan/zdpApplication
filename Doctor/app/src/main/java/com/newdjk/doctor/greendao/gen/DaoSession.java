package com.newdjk.doctor.greendao.gen;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.newdjk.doctor.ui.entity.AllRecordForDoctorEntity;
import com.newdjk.doctor.ui.entity.ChatHistoryEntity;
import com.newdjk.doctor.ui.entity.PushDataDaoEntity;
import com.newdjk.doctor.ui.entity.FunctionDataEntity;

import com.newdjk.doctor.greendao.gen.AllRecordForDoctorEntityDao;
import com.newdjk.doctor.greendao.gen.ChatHistoryEntityDao;
import com.newdjk.doctor.greendao.gen.PushDataDaoEntityDao;
import com.newdjk.doctor.greendao.gen.FunctionDataEntityDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig allRecordForDoctorEntityDaoConfig;
    private final DaoConfig chatHistoryEntityDaoConfig;
    private final DaoConfig pushDataDaoEntityDaoConfig;
    private final DaoConfig functionDataEntityDaoConfig;

    private final AllRecordForDoctorEntityDao allRecordForDoctorEntityDao;
    private final ChatHistoryEntityDao chatHistoryEntityDao;
    private final PushDataDaoEntityDao pushDataDaoEntityDao;
    private final FunctionDataEntityDao functionDataEntityDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        allRecordForDoctorEntityDaoConfig = daoConfigMap.get(AllRecordForDoctorEntityDao.class).clone();
        allRecordForDoctorEntityDaoConfig.initIdentityScope(type);

        chatHistoryEntityDaoConfig = daoConfigMap.get(ChatHistoryEntityDao.class).clone();
        chatHistoryEntityDaoConfig.initIdentityScope(type);

        pushDataDaoEntityDaoConfig = daoConfigMap.get(PushDataDaoEntityDao.class).clone();
        pushDataDaoEntityDaoConfig.initIdentityScope(type);

        functionDataEntityDaoConfig = daoConfigMap.get(FunctionDataEntityDao.class).clone();
        functionDataEntityDaoConfig.initIdentityScope(type);

        allRecordForDoctorEntityDao = new AllRecordForDoctorEntityDao(allRecordForDoctorEntityDaoConfig, this);
        chatHistoryEntityDao = new ChatHistoryEntityDao(chatHistoryEntityDaoConfig, this);
        pushDataDaoEntityDao = new PushDataDaoEntityDao(pushDataDaoEntityDaoConfig, this);
        functionDataEntityDao = new FunctionDataEntityDao(functionDataEntityDaoConfig, this);

        registerDao(AllRecordForDoctorEntity.class, allRecordForDoctorEntityDao);
        registerDao(ChatHistoryEntity.class, chatHistoryEntityDao);
        registerDao(PushDataDaoEntity.class, pushDataDaoEntityDao);
        registerDao(FunctionDataEntity.class, functionDataEntityDao);
    }
    
    public void clear() {
        allRecordForDoctorEntityDaoConfig.clearIdentityScope();
        chatHistoryEntityDaoConfig.clearIdentityScope();
        pushDataDaoEntityDaoConfig.clearIdentityScope();
        functionDataEntityDaoConfig.clearIdentityScope();
    }

    public AllRecordForDoctorEntityDao getAllRecordForDoctorEntityDao() {
        return allRecordForDoctorEntityDao;
    }

    public ChatHistoryEntityDao getChatHistoryEntityDao() {
        return chatHistoryEntityDao;
    }

    public PushDataDaoEntityDao getPushDataDaoEntityDao() {
        return pushDataDaoEntityDao;
    }

    public FunctionDataEntityDao getFunctionDataEntityDao() {
        return functionDataEntityDao;
    }

}
